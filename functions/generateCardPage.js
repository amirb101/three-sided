const { onRequest } = require('firebase-functions/v2/https');
const admin = require('firebase-admin');
const fs = require('fs');
const path = require('path');

// Initialize admin if not already done
if (!admin.apps.length) {
  admin.initializeApp();
}
const db = admin.firestore();

/**
 * Generates server-side rendered card pages with proper SEO meta tags
 * This enables Google Images indexing similar to Reddit
 */
exports.generateCardPage = onRequest({
  invoker: 'public'
}, async (req, res) => {
  try {
    // Extract slug from URL path: /card/[slug]
    const urlPath = req.url || req.path || '';
    const slug = urlPath.split('/card/')[1]?.split('?')[0]?.split('#')[0];
    
    if (!slug) {
      return res.status(400).send('Missing card slug');
    }

    // Get flashcard data
    const cardDoc = await db.collection('publicCards').doc(slug).get();
    if (!cardDoc.exists) {
      return res.status(404).send('Card not found');
    }

    const cardData = cardDoc.data();
    
    // Get author profile info
    let authorInfo = { displayName: 'Anonymous', slug: '' };
    if (cardData.authorSlug) {
      const profileDoc = await db.collection('profiles').doc(cardData.authorSlug).get();
      if (profileDoc.exists) {
        authorInfo = profileDoc.data();
      }
    }

    // Read the enhanced template
    const templatePath = path.join(__dirname, '../public/card/enhanced.html');
    let html = fs.readFileSync(templatePath, 'utf8');

    // Prepare template variables
    const statement = cardData.statement || 'Mathematical Problem';
    const hints = cardData.hints || 'No hints available';
    const proof = cardData.proof || 'No proof available';
    const tags = cardData.tags || [];
    const viewCount = cardData.viewCount || 0;
    const likeCount = cardData.likeCount || 0;
    const authorName = authorInfo.displayName || 'Anonymous';
    const authorSlug = cardData.authorSlug || '';
    
    // Create clean text versions (strip HTML/LaTeX for meta descriptions)
    const cleanStatement = statement.replace(/<[^>]*>/g, '').replace(/\$[^$]*\$/g, '').substring(0, 160);
    const title = `${cleanStatement} - Three-Sided Flashcard`;
    const description = `Learn ${cleanStatement}. Created by ${authorName}. ${viewCount} views, ${likeCount} likes. Free flashcard on Three-Sided.`;
    
    const canonicalUrl = `https://three-sided.com/card/${encodeURIComponent(slug)}`;
    // Use dynamic card image generated by our function
    const ogImageUrl = `https://us-central1-three-sided-flashcard-app.cloudfunctions.net/generateCardImage?slug=${encodeURIComponent(slug)}`;
    const imageAlt = `Three-Sided Flashcard: ${cleanStatement}`;
    
    const publishedTime = cardData.createdAt ? cardData.createdAt.toDate().toISOString() : new Date().toISOString();
    const publishedDate = cardData.createdAt ? cardData.createdAt.toDate().toLocaleDateString() : new Date().toLocaleDateString();
    const modifiedTime = cardData.updatedAt ? cardData.updatedAt.toDate().toISOString() : publishedTime;
    
    const authorUrl = authorSlug ? `https://three-sided.com/profile/${authorSlug}` : 'https://three-sided.com';
    const keywords = tags.join(', ');
    const shareText = encodeURIComponent(`Check out this flashcard: ${cleanStatement}`);
    
    // Determine difficulty based on content length and tags
    let difficulty = 'intermediate';
    if (statement.length < 100) difficulty = 'beginner';
    if (statement.length > 300 || tags.some(tag => ['calculus', 'analysis', 'topology'].includes(tag))) difficulty = 'advanced';

    // Replace template placeholders
    const replacements = {
      '{{TITLE}}': title,
      '{{DESCRIPTION}}': description,
      '{{CANONICAL_URL}}': canonicalUrl,
      '{{OG_IMAGE_URL}}': ogImageUrl,
      '{{IMAGE_ALT}}': imageAlt,
      '{{AUTHOR}}': authorName,
      '{{AUTHOR_URL}}': authorUrl,
      '{{PUBLISHED_TIME}}': publishedTime,
      '{{PUBLISHED_DATE}}': publishedDate,
      '{{MODIFIED_TIME}}': modifiedTime,
      '{{TAGS}}': tags.join(', '),
      '{{KEYWORDS}}': keywords,
      '{{DIFFICULTY}}': difficulty,
      '{{STATEMENT}}': statement,
      '{{HINTS}}': hints,
      '{{PROOF}}': proof,
      '{{CARD_TITLE}}': cleanStatement,
      '{{VIEW_COUNT}}': viewCount.toString(),
      '{{LIKE_COUNT}}': likeCount.toString(),
      '{{SHARE_TEXT}}': shareText
    };

    // Apply all replacements
    Object.entries(replacements).forEach(([placeholder, value]) => {
      html = html.replace(new RegExp(placeholder, 'g'), value);
    });

    // Handle conditional tags section
    if (tags.length > 0) {
      const tagsHtml = tags.map(tag => `<span itemprop="keywords" class="tag">${tag}</span>`).join('');
      html = html.replace('{{#if TAGS}}', '').replace('{{/if}}', '').replace('{{#each TAGS}}{{this}}{{/each}}', tagsHtml);
    } else {
      // Remove tags section if no tags
      html = html.replace(/{{#if TAGS}}[\s\S]*?{{\/if}}/g, '');
    }

    // Set proper headers
    res.set('Content-Type', 'text/html; charset=utf-8');
    res.set('Cache-Control', 'public, max-age=3600'); // Cache for 1 hour
    
    // Add security headers
    res.set('X-Frame-Options', 'SAMEORIGIN');
    res.set('X-Content-Type-Options', 'nosniff');
    res.set('Referrer-Policy', 'strict-origin-when-cross-origin');

    res.send(html);

  } catch (error) {
    console.error('Error generating card page:', error);
    res.status(500).send('Failed to generate page');
  }
});

/**
 * Helper function to sanitize text for meta tags
 */
function sanitizeForMeta(text) {
  return text
    .replace(/<[^>]*>/g, '') // Remove HTML tags
    .replace(/\$[^$]*\$/g, '') // Remove LaTeX
    .replace(/"/g, '&quot;') // Escape quotes
    .replace(/&/g, '&amp;') // Escape ampersands
    .trim();
}
